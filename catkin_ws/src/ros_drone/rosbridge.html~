<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8"/>
  <script src="http://cdn.robotwebtools.org/EventEmitter2/current/eventemitter2.min.js"></script>
  <script src="http://cdn.robotwebtools.org/roslibjs/current/roslib.js"></script>
  <script>
    var ros = new ROSLIB.Ros();
    
    ros.on('error', function(error) {
      console.log('error:', error);
    });

    ros.on('connection', function() {
      console.log('completely connected!');
    });

    ros.on('close', function() {
      console.log('connection closed');
    });

    ros.connect('ws://localhost:9090');

    var listener = new ROSLIB.Topic({
	ros: ros,
	name: '/NALD_DRONE_LISTENER',
	// name: '/listener',
	messageType: 'std_msgs/String'
    });

    var gps_json = { x: 0, y: 0, z: 0 };
    var service_to_drone = null;
    var gps_data = null;

    listener.subscribe(function(message) {
	console.log('Received:', message);
	var splitted = message.data.split(',');
	console.log('splitted:', splitted);
	gps_json.x = parseFloat(splitted[0]);
	gps_json.y = parseFloat(splitted[1]);
	gps_json.z = parseFloat(splitted[2]);
	console.log('gps_json:', gps_json);

	// TODO CHECK_DONE
	service_to_drone = new ROSLIB.Service({
	    ros: ros,
	    //name: 'controller_node2',
	    name: 'gps_service',
	    serviceType: 'ros_drone/gps_service'
	});

	gps_data = new ROSLIB.ServiceRequest(gps_json);

	console.log('gps_data:', gps_data);
	
	service_to_drone.callService(gps_data, function(result) {
	    console.log('Result:', result);
	});
    });

/*
    var gps_data = new ROSLIB.ServiceRequest(gps_json);

    service_to_drone.callService(gps_data, function(result) {
	console.log('Result:', result);
    });
*/
    ros.getParams(function(params) {
	console.log('ros.getParams::' + params);
    });

  </script>
</head>
<body>
  <h1>NALD ROSBRIDGE</h1>
</body>
</html>
